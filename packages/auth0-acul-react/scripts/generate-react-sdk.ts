import fs from 'fs';
import path from 'path';
import { Project, SyntaxKind } from 'ts-morph';
import { fileURLToPath } from 'url';

// Setup __dirname for ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Paths
const CORE_SDK_PATH = path.resolve(__dirname, '../../auth0-acul-js');
const HOOKS_OUTPUT_PATH = path.resolve(__dirname, '../src/hooks');
const INDEX_FILE_PATH = path.resolve(__dirname, '../src/index.ts');
const PACKAGE_JSON_PATH = path.resolve(__dirname, '../package.json');

// Utility: PascalCase -> kebab-case
function toKebabCase(str: string): string {
  return str
    .replace(/([a-z0-9])([A-Z])/g, '$1-$2')
    .replace(/([A-Z])([A-Z][a-z])/g, '$1-$2')
    .toLowerCase();
}

// Ensure output dir exists
fs.mkdirSync(HOOKS_OUTPUT_PATH, { recursive: true });

// Load ts-morph project
const project = new Project({
  tsConfigFilePath: path.join(CORE_SDK_PATH, 'tsconfig.json'),
});

// Load core SDK entry
const entryFile = project.getSourceFileOrThrow(
  path.join(CORE_SDK_PATH, 'src/screens/index.ts')
);

// Find exported screen classes
const screenExports = entryFile.getExportSymbols().filter((symbol) => {
  const aliasedSymbol = symbol.getAliasedSymbol?.();
  const classDecl = aliasedSymbol?.getDeclarations()[0];
  return classDecl?.getKindName() === 'ClassDeclaration';
});

const hooksGenerated: { key: string; file: string; hookName: string }[] = [];

// === Main generation loop ===
for (const symbol of screenExports) {
  const screenName = symbol.getName();
  const kebabName = toKebabCase(screenName);
  const hookName = `use${screenName}`;
  const contextName = `${screenName}Context`;
  const fileName = `${kebabName}.tsx`;

  const content = `// AUTO-GENERATED FILE - DO NOT EDIT
// This file was generated by scripts/generate-react-sdk.ts

import React, { createContext, useContext, useMemo } from 'react';
import ${screenName} from '@auth0/auth0-acul-js/${kebabName}';

const ${contextName} = createContext<${screenName} | null>(null);

export function ${hookName}(): ${screenName} {
  return useMemo(() => new ${screenName}(), []);
}

export const Auth0AculProvider = ({ children }: { children: React.ReactNode }) => {
  const screen = ${hookName}();
  return <${contextName}.Provider value={screen}>{children}</${contextName}.Provider>;
};

export function useAculContext(): ${screenName} {
  const screen = useContext(${contextName});
  if (!screen) {
    throw new Error('useAculContext must be used within an <Auth0AculProvider>');
  }
  return screen;
}

export type * from '@auth0/auth0-acul-js/${kebabName}';
`;

  fs.writeFileSync(path.join(HOOKS_OUTPUT_PATH, fileName), content.trim() + '\n', 'utf-8');

  hooksGenerated.push({
    key: `./${kebabName}`,
    file: `hooks/${kebabName}`,
    hookName,
  });
}

// === Collect interfaces from auth0-acul-js ===
const coreIndexFile = project.getSourceFileOrThrow(
  path.join(CORE_SDK_PATH, 'src/index.ts')
);

const exportedInterfaces: string[] = [];

const exports = coreIndexFile.getExportedDeclarations();
for (const [name, declarations] of exports) {
  for (const decl of declarations) {
    if (decl.getKind() === SyntaxKind.InterfaceDeclaration) {
      exportedInterfaces.push(name);
    }
  }
}

// === Generate src/index.ts content ===
const indexContent = `// AUTO-GENERATED INDEX FILE
// This file was generated by scripts/generate-react-sdk.ts

${hooksGenerated
  .map(({ hookName, file }) => `export { ${hookName} } from './${file}';`)
  .join('\n')}

export { getCurrentScreen } from '@auth0/auth0-acul-js';

${
  exportedInterfaces.length > 0
    ? `export type {\n  ${exportedInterfaces.join(',\n  ')}\n} from '@auth0/auth0-acul-js';`
    : ''
}
`;

fs.writeFileSync(INDEX_FILE_PATH, indexContent.trim() + '\n', 'utf-8');

// === Update package.json exports ===
const pkgRaw = fs.readFileSync(PACKAGE_JSON_PATH, 'utf-8');
const pkg = JSON.parse(pkgRaw);

pkg.exports = pkg.exports || {};
pkg.exports['.'] = pkg.exports['.'] || {
  import: './dist/index.js',
  types: './dist/index.d.ts',
};

for (const { key, file } of hooksGenerated) {
  pkg.exports[key] = {
    import: `./dist/${file}.js`,
    types: `./dist/${file}.d.ts`,
  };
}

fs.writeFileSync(PACKAGE_JSON_PATH, JSON.stringify(pkg, null, 2), 'utf-8');

console.log(`âœ… Generated ${hooksGenerated.length} screen hooks, updated src/index.ts, and refreshed package.json exports.`);
