name: ACUL Screens - Build and Deploy

on:
  push:
    branches: [main, master]
    paths:
      - 'packages/auth0-acul-js/examples/acul-boilerplate/**'
  workflow_dispatch:  # Allow manual triggering

env:
  WORKING_DIR: packages/auth0-acul-js/examples/acul-boilerplate

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Build application
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_S3_ARN }}
          aws-region: ap-southeast-2
          mask-aws-account-id: true

      - name: Discover available screens
        id: discover-screens
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # Best to discover from built assets for deployment
          SCREENS_FROM_DIST=$(find dist/assets -type d -depth 1 -not -path "*/\.*" -not -path "*/shared*" -exec basename {} \; | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "screens=$SCREENS_FROM_DIST" >> $GITHUB_OUTPUT
          echo "Found screens from dist: $SCREENS_FROM_DIST"

      - name: Upload to S3
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # Upload the entire dist directory to S3
          aws s3 sync ./dist s3://${{ secrets.S3_BUCKET_NAME }}/ \
            --delete \
            --cache-control "max-age=31536000,public" \
            || { echo "S3 upload failed"; exit 1; }
          echo "Assets uploaded to S3 bucket: ${{ secrets.S3_BUCKET_NAME }}"

      - name: Install Auth0 CLI
        run: |
          curl -sSfL https://raw.githubusercontent.com/auth0/auth0-cli/main/install.sh -o install.sh
          chmod +x install.sh
          ./install.sh -b .
          sudo mv ./auth0 /usr/local/bin/
          rm install.sh
          auth0 --version

      - name: Authorize with Auth0
        run: |
          auth0 login \
            --domain ${{ secrets.AUTH0_DOMAIN }} \
            --client-id ${{ secrets.AUTH0_CLIENT_ID }} \
            --client-secret ${{ secrets.AUTH0_CLIENT_SECRET }}

      - name: Configure Auth0 screens
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          # Parse screens array from json
          SCREENS=$(echo '${{ steps.discover-screens.outputs.screens }}' | jq -c '.[]' | tr -d '"')
          
          # Get CDN base URL
          CDN_URL="${{ secrets.CDN_URL }}"
          
          # Configure each screen
          for screen in $SCREENS; do
            echo "Configuring screen: $screen"
            
            # Get assets for this screen
            SCREEN_JS=$(find dist/assets/$screen -name "index.*.js" | head -n 1 | xargs basename)
            SCREEN_CSS=$(find dist/assets/$screen -name "*.css" | head -n 1 | xargs basename || echo "")
            
            # Look for shared assets
            VENDOR_JS=$(find dist/assets/shared -name "vendor.js" 2>/dev/null | head -n 1 | xargs basename 2>/dev/null || echo "")
            AUTH0_ACUL_JS=$(find dist/assets/shared -name "auth0-acul.*.js" 2>/dev/null | head -n 1 | xargs basename 2>/dev/null || echo "")
            DEPENDENCIES_JS=$(find dist/assets/shared -name "dependencies.*.js" 2>/dev/null | head -n 1 | xargs basename 2>/dev/null || echo "")
            MAIN_JS=$(find dist/assets -maxdepth 1 -name "main.*.js" | head -n 1 | xargs basename 2>/dev/null || echo "")
            
            # Create settings.json with dynamic head tags
            echo "Creating settings.json for $screen"
            
            # Initialize JSON structure
            cat > settings.json << EOF
            {
              "rendering_mode": "advanced",
              "context_configuration": [
                "branding.settings",
                "branding.themes.default",
                "client.logo_uri",
                "client.description",
                "organization.display_name",
                "organization.branding",
                "screen.texts",
                "tenant.name",
                "tenant.friendly_name",
                "tenant.enabled_locales",
                "untrusted_data.submitted_form_data",
                "untrusted_data.authorization_params.ui_locales",
                "untrusted_data.authorization_params.login_hint",
                "untrusted_data.authorization_params.screen_hint"
              ],
              "default_head_tags_disabled": false,
              "head_tags": [
            EOF
            
            # Add base and meta tags
            cat >> settings.json << EOF
                {
                  "tag": "base",
                  "attributes": {
                    "href": "${CDN_URL}/"
                  }
                },
                {
                  "tag": "meta",
                  "attributes": {
                    "name": "viewport",
                    "content": "width=device-width, initial-scale=1"
                  }
                }
            EOF
            
            # Add CSS files if they exist
            if [ ! -z "$SCREEN_CSS" ]; then
              cat >> settings.json << EOF
                ,{
                  "tag": "link",
                  "attributes": {
                    "rel": "stylesheet",
                    "href": "${CDN_URL}/assets/${screen}/${SCREEN_CSS}"
                  }
                }
            EOF
            fi
            
            # Add vendor JS if it exists
            if [ ! -z "$VENDOR_JS" ]; then
              cat >> settings.json << EOF
                ,{
                  "tag": "script",
                  "attributes": {
                    "src": "${CDN_URL}/assets/shared/${VENDOR_JS}",
                    "type": "module"
                  }
                }
            EOF
            fi
            
            # Add dependencies JS if it exists
            if [ ! -z "$DEPENDENCIES_JS" ]; then
              cat >> settings.json << EOF
                ,{
                  "tag": "script",
                  "attributes": {
                    "src": "${CDN_URL}/assets/shared/${DEPENDENCIES_JS}",
                    "type": "module"
                  }
                }
            EOF
            fi
            
            # Add Auth0 ACUL JS if it exists
            if [ ! -z "$AUTH0_ACUL_JS" ]; then
              cat >> settings.json << EOF
                ,{
                  "tag": "script",
                  "attributes": {
                    "src": "${CDN_URL}/assets/shared/${AUTH0_ACUL_JS}",
                    "type": "module"
                  }
                }
            EOF
            fi
            
            # Add main JS if it exists
            if [ ! -z "$MAIN_JS" ]; then
              cat >> settings.json << EOF
                ,{
                  "tag": "script",
                  "attributes": {
                    "src": "${CDN_URL}/assets/${MAIN_JS}",
                    "type": "module"
                  }
                }
            EOF
            fi
            
            # Add screen-specific JS (always exists)
            cat >> settings.json << EOF
                ,{
                  "tag": "script",
                  "attributes": {
                    "src": "${CDN_URL}/assets/${screen}/${SCREEN_JS}",
                    "type": "module"
                  }
                }
              ]
            }
            EOF
            
            # Display the generated settings file for debugging
            echo "Generated settings.json for $screen:"
            cat settings.json
            
            # Configure the screen using Auth0 CLI
            echo "Configuring Auth0 screen: $screen"
            auth0 ul customize \
              --rendering-mode advanced \
              --prompt $screen \
              --screen $screen \
              --settings-file settings.json
            
            echo "âœ… Screen $screen configured successfully"
          done

      - name: Invalidate CloudFront distribution (if needed)
        if: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Cleanup
        if: always()
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          rm -f settings.json