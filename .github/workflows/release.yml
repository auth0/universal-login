name: Monorepo Release

on:
  pull_request:
    types:
      - closed
    branches:
      - 'master'
  workflow_dispatch:
permissions:
  contents: write
  id-token: write

jobs:
  release:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged && startsWith(github.event.pull_request.head.ref, 'release/'))
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Check Node.js version
        run: node --version

      - name: Install deps
        run: npm ci --workspaces --include-workspace-root

      # Parse package name and version from branch
      - name: Parse version and package
        id: meta
        run: |
          REF="${{ github.head_ref || github.ref_name }}"
          echo "REF=$REF"

          # Extract DIR_NAME from branch name (not version)
          DIR_NAME=$(echo "$REF" | sed -E 's|^release/([^/]+)-.*$|\1|')

          PACKAGE_JSON_PATH="packages/$DIR_NAME/package.json"
          PACKAGE_NAME=$(jq -r .name "$PACKAGE_JSON_PATH")
          PACKAGE_NAME_UNSCOPED=$(echo "$PACKAGE_NAME" | sed 's/^@[^/]*\///')
          PACKAGE_VERSION=$(jq -r .version "$PACKAGE_JSON_PATH")

          if [ -z "$PACKAGE_NAME" ] || [ -z "$PACKAGE_VERSION" ]; then
            echo "ERROR: Could not parse package name or version."
            exit 1
          fi

          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "name_unscoped=$PACKAGE_NAME_UNSCOPED" >> $GITHUB_OUTPUT
          echo "dir=$DIR_NAME" >> $GITHUB_OUTPUT
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$PACKAGE_NAME_UNSCOPED@$PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Install rimraf globally
        run: npm install -g rimraf

      - name: Lint package
        run: npm run lint --workspace=${{ steps.meta.outputs.name }}

      - name: Build package using workspace
        run: npm run build --workspace=${{ steps.meta.outputs.name }}

      - name: Publish to NPM
        uses: ./.github/actions/npm-publish
        with:
           node-version: 22
           npm-token: ${{ secrets.NPM_TOKEN }}
           version: ${{ steps.meta.outputs.version }}
           require-build: true
           package: ${{ steps.meta.outputs.dir }}
           release-directory: ${{ steps.meta.outputs.dir }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: ./.github/actions/release-create
        with:
          tag: ${{ steps.meta.outputs.tag_name }}
          name: ${{ steps.meta.outputs.tag_name }}
          version: ${{ steps.meta.outputs.version }}

      - name: Generate documentation for released package only
        run: |
          npm run build --workspace=${{ steps.meta.outputs.name }}
          npm run docs --workspace=${{ steps.meta.outputs.name }}
          node ./scripts/unify-docs.js --package=${{ steps.meta.outputs.dir }}

      - name: Deploy updated documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          keep_files: true